/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/role": {
    get: operations["findMany"];
    put: operations["updateMany"];
    post: operations["createRole"];
  };
  "/api/role/:id": {
    get: operations["findById"];
    put: operations["updateRole"];
    delete: operations["deleteRole"];
  };
  "/api/role/findOne": {
    get: operations["findOne"];
  };
  "/api/user": {
    get: operations["findMany"];
    put: operations["updateMany"];
    post: operations["createUser"];
  };
  "/api/user/:id": {
    get: operations["findById"];
    put: operations["updateUser"];
    delete: operations["deleteUser"];
  };
  "/api/user/:id/changePassword": {
    put: operations["changePassword"];
  };
  "/api/user/findOne": {
    get: operations["findOne"];
  };
  "/api/auth/authorize": {
    post: operations["authorize"];
  };
  "/api/auth/token": {
    post: operations["renewToken"];
  };
  "/api/auth/me": {
    get: operations["getIdentity"];
  };
  "/api/auth/logout": {
    get: operations["logout"];
  };
}

export interface components {
  schemas: {
    AuthResponse: {
      access_token: string;
      refresh_token: string;
      id_token?: string;
      claims: components["schemas"]["AuthClaims"];
    };
    AuthClaims: {
      sub: string;
      name: string;
      given_name?: string;
      family_name?: string;
      nickname: string;
      preferred_username: string;
      profile?: string;
      picture?: string;
      email: string;
      email_verified?: boolean;
      iat: number;
      exp: number;
      "mercusuar.pln.co.id/permissions"?: string[];
      "mercusuar.pln.co.id/scopes"?: string[];
    };
    UserInput: {
      username: string;
      name: string;
      email: string;
      password: string;
      confirm_password: string;
      roles?: number[];
    };
    User: {
      id?: number;
      username?: string;
      name?: string;
      email?: string;
      email_verified?: string;
      roles?: components["schemas"]["Role"][];
    };
    RoleInput: {
      name?: string;
      description?: string;
      permissions?: string[];
      scopes?: string[];
    };
    Role: {
      id?: number;
      description?: string;
      permissions?: string[];
      scopes?: string[];
    };
  };
}

export interface operations {
  findMany: {
    parameters: {
      query: {
        /** Query params */
        filter?: string;
      };
    };
    responses: {
      /** Find many users */
      200: {
        content: {
          "application/json": components["schemas"]["User"][];
        };
      };
    };
  };
  updateMany: {
    parameters: {
      query: {
        /** Query params */
        filter?: string;
      };
    };
    responses: {
      /** Success update many users */
      200: {
        content: {
          "application/json": number;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserInput"];
      };
    };
  };
  createRole: {
    responses: {
      /** Success create a role */
      200: {
        content: {
          "application/json": components["schemas"]["Role"];
        };
      };
      /** Duplicate role */
      400: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RoleInput"];
      };
    };
  };
  findById: {
    responses: {
      /** Return a user */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
  };
  updateRole: {
    responses: {
      /** Success update a role */
      200: {
        content: {
          "application/json": components["schemas"]["Role"];
        };
      };
      /** Duplicate role */
      400: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RoleInput"];
      };
    };
  };
  deleteRole: {
    responses: {
      /** Success delete a role */
      200: unknown;
    };
  };
  findOne: {
    parameters: {
      query: {
        /** Query where params */
        where?: string;
      };
    };
    responses: {
      /** Return a user */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
  };
  createUser: {
    responses: {
      /** Success create a user */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** Duplicate user */
      400: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserInput"];
      };
    };
  };
  updateUser: {
    responses: {
      /** Success update a user */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** Duplicate user */
      400: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserInput"];
      };
    };
  };
  deleteUser: {
    responses: {
      /** Success delete a user */
      200: unknown;
    };
  };
  changePassword: {
    responses: {
      /** Success change user's password */
      200: unknown;
    };
    requestBody: {
      content: {
        "application/json": {
          password: string;
          confirm_password: string;
        };
      };
    };
  };
  authorize: {
    responses: {
      /** Success authorize User */
      200: {
        content: {
          "application/json": components["schemas"]["AuthResponse"];
        };
      };
      /** Invalid username/password supplied */
      400: unknown;
      /** User not found */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description User ID (username/email) */
          user_id: string;
          /** @description User Password */
          password: string;
          /** @description Remember Session */
          remember_me?: boolean;
        };
      };
    };
  };
  renewToken: {
    parameters: {
      query: {
        /** Valid refresh token */
        refresh_token: string;
      };
    };
    responses: {
      /** Success get new user's token */
      200: {
        content: {
          "application/json": components["schemas"]["AuthResponse"];
        };
      };
    };
  };
  getIdentity: {
    responses: {
      /** Success get user's identity */
      200: {
        content: {
          "application/json": components["schemas"]["AuthClaims"];
        };
      };
    };
  };
  logout: {
    parameters: {
      query: {
        /** Valid previous access token */
        id_token_hint: string;
        /** Logout redirect uri */
        post_logout_redirect_uri?: string;
      };
    };
    responses: {
      /** Success logout user's session */
      200: unknown;
      /** Success logout user's session and redirect */
      302: never;
    };
  };
}

export interface external {}
